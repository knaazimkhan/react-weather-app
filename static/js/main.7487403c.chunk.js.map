{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","currentTemperature","actual","feels","summary","icon","daily","location","name","lat","lng","skycons","window","Skycons","color","fetch","this","then","response","json","data","setState","Math","round","currently","temperature","apparentTemperature","add","play","document","getElementById","getAttribute","placesAutocomplete","places","appId","apiKey","container","querySelector","$address","on","e","textContent","suggestion","value","console","log","className","type","id","placeholder","ref","width","height","slice","map","day","index","key","time","moment","unix","format","data-icon","temperatureHigh","temperatureLow","Component","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7487403c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport moment from \"moment\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            currentTemperature: {\n                actual: \"\",\n                feels: \"\",\n                summary: \"\",\n                icon: \"\"\n            },\n            daily: [],\n            location: {\n                name: \"Toronto, canada\",\n                lat: 43.6532,\n                lng: -79.38323\n            }\n        };\n\n    }\n\n    componentDidMount() {\n        // navigator.geolocation.getCurrentPosition(position =>\n        //     console.log(position)\n        // );\n\n        const skycons = new window.Skycons({ color: \"white\" });\n\n\n        fetch(\n            `https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/ca307ada319c01e70496ee5cc6b78e7e/${this.state.location.lat},${this.state.location.lng}?units=ca`\n        )\n            .then(response => response.json())\n            .then(data => {\n                this.setState({\n                    currentTemperature: {\n                        actual: Math.round(data.currently.temperature),\n                        feels: Math.round(data.currently.apparentTemperature),\n                        summary: data.currently.summary,\n                        icon: data.currently.icon\n                    },\n                    daily: [...data.daily.data]\n                });\n\n                skycons.add(\n                    \"iconCurrent\",\n                    `${this.state.currentTemperature.icon}`\n                );\n                skycons.play();\n\n                skycons.add(\n                    \"icon1\",\n                    document.getElementById(\"icon1\").getAttribute(\"data-icon\")\n                );\n                skycons.add(\n                    \"icon2\",\n                    document.getElementById(\"icon2\").getAttribute(\"data-icon\")\n                );\n                skycons.add(\n                    \"icon3\",\n                    document.getElementById(\"icon3\").getAttribute(\"data-icon\")\n                );\n                skycons.add(\n                    \"icon4\",\n                    document.getElementById(\"icon4\").getAttribute(\"data-icon\")\n                );\n                skycons.add(\n                    \"icon5\",\n                    document.getElementById(\"icon5\").getAttribute(\"data-icon\")\n                );\n                skycons.play();\n            });\n\n        var placesAutocomplete = window.places({\n            appId: 'plV6X3BNJ94E',\n            apiKey: 'de4d08b6c1fbb8fbeb09728eed04a234',\n            container: document.querySelector('#address')\n        });\n\n        var $address = document.querySelector('#address-value')\n        placesAutocomplete.on('change', function (e) {\n            $address.textContent = e.suggestion.value\n            console.log(e.suggestion)\n\n        });\n\n        placesAutocomplete.on('clear', function () {\n            $address.textContent = 'none';\n        });\n        // this.setState({\n        //     location: {\n        //         name: e.suggestion.value,\n        //         lat: e.suggestion.latlng.lat,\n        //         lng: e.suggestion.latlng.lng\n        //     }\n        // });\n\n    }\n\n\n\n    render() {\n        const daily = this.state.daily;\n        return (\n            <div className='flex justify-center pt-16'>\n                <div className='text-white mb-8'>\n                    <div className='places-input text-gray-800'>\n                        <input type=\"search\" id=\"address\" className=\"form-control\" placeholder=\"Where are we going?\"\n\n                        />\n\n                        <p>Selected: <strong id=\"address-value\">none</strong></p>\n                    </div>\n                    <div className='weather-container font-sans w-128 max-w-lg rounded-lg overflow-hidden bg-gray-900 shadow-lg mt-4'>\n                        <div className='current-weather flex items-center justify-between px-6 py-8'>\n                            <div className='flex items-center'>\n                                <div>\n                                    <div className='text-6xl font-semibold'>\n                                        {this.state.currentTemperature.actual}\n                                        °C\n                                    </div>\n                                    <div>\n                                        {`feels like \n                                        ${this.state.currentTemperature.feels}`}\n                                        °C\n                                    </div>\n                                </div>\n                                <div className='mx-5'>\n                                    <div className='font-semibold'>\n                                        {this.state.currentTemperature.summary}\n                                    </div>\n                                    <div>{this.state.location.name}</div>\n                                </div>\n                            </div>\n                            <div>\n                                <canvas\n                                    ref='iconCurrent'\n                                    id='iconCurrent'\n                                    width='96'\n                                    height='96'\n                                ></canvas>\n                            </div>\n                        </div>\n                        {daily.slice(0, 5).map((day, index) => {\n                            return (\n                                <div\n                                    key={day.time}\n                                    className='future-weather text-sm bg-gray-800 px-6 py-8 overflow-hidden'\n                                >\n                                    <div\n                                        className={`flex items-center${\n                                            index > 0 ? \" mt-2\" : \"\"\n                                            }`}\n                                    >\n                                        <div className='w-1/6 text-lg text-gray-200'>\n                                            {moment\n                                                .unix(day.time)\n                                                .format(\"ddd\")}\n                                        </div>\n                                        <div className='w-4/6 px-4 flex items-center'>\n                                            <div>\n                                                <canvas\n                                                    id={`icon${index + 1}`}\n                                                    data-icon={day.icon}\n                                                    width='24'\n                                                    height='24'\n                                                ></canvas>\n                                            </div>\n                                            <div className='ml-3'>\n                                                {day.summary}\n                                            </div>\n                                        </div>\n                                        <div className='w-1/6 text-right'>\n                                            <div>{day.temperatureHigh} °C</div>\n                                            <div>{day.temperatureLow} °C</div>\n                                        </div>\n                                    </div>\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}